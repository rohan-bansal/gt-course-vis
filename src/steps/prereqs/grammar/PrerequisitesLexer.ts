// Generated from src/steps/prereqs/grammar/Prerequisites.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class PrerequisitesLexer extends Lexer {
	public static readonly AND = 1;
	public static readonly OR = 2;
	public static readonly OPARENS = 3;
	public static readonly CPARENS = 4;
	public static readonly GRADE_LETTER = 5;
	public static readonly COURSE_PREFIX = 6;
	public static readonly GRADE_PREFIX = 7;
	public static readonly TEST_NAME = 8;
	public static readonly COURSE_NUMBER = 9;
	public static readonly COURSE_SUBJECT = 10;
	public static readonly SPACE = 11;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"AND", "OR", "OPARENS", "CPARENS", "GRADE_LETTER", "COURSE_PREFIX", "GRADE_PREFIX", 
		"TEST_NAME", "COURSE_NUMBER", "COURSE_SUBJECT", "SPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'and'", "'or'", "'('", "')'", undefined, undefined, "'Minimum Grade of'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "AND", "OR", "OPARENS", "CPARENS", "GRADE_LETTER", "COURSE_PREFIX", 
		"GRADE_PREFIX", "TEST_NAME", "COURSE_NUMBER", "COURSE_SUBJECT", "SPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(PrerequisitesLexer._LITERAL_NAMES, PrerequisitesLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return PrerequisitesLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(PrerequisitesLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Prerequisites.g4"; }

	// @Override
	public get ruleNames(): string[] { return PrerequisitesLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return PrerequisitesLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return PrerequisitesLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return PrerequisitesLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\r\xDF\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05" +
		"\x07Z\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x05\t\xCA\n\t\x03\n\x06\n\xCD\n\n\r\n\x0E\n" +
		"\xCE\x03\n\x07\n\xD2\n\n\f\n\x0E\n\xD5\v\n\x03\v\x06\v\xD8\n\v\r\v\x0E" +
		"\v\xD9\x03\f\x03\f\x03\f\x03\f\x02\x02\x02\r\x03\x02\x03\x05\x02\x04\x07" +
		"\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15" +
		"\x02\f\x17\x02\r\x03\x02\x06\x04\x02CFUX\x04\x022;ZZ\x03\x02C\\\x05\x02" +
		"\v\f\x0F\x0F\"\"\x02\xE7\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02" +
		"\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02" +
		"\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02" +
		"\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x03" +
		"\x19\x03\x02\x02\x02\x05\x1D\x03\x02\x02\x02\x07 \x03\x02\x02\x02\t\"" +
		"\x03\x02\x02\x02\v$\x03\x02\x02\x02\rY\x03\x02\x02\x02\x0F[\x03\x02\x02" +
		"\x02\x11\xC9\x03\x02\x02\x02\x13\xCC\x03\x02\x02\x02\x15\xD7\x03\x02\x02" +
		"\x02\x17\xDB\x03\x02\x02\x02\x19\x1A\x07c\x02\x02\x1A\x1B\x07p\x02\x02" +
		"\x1B\x1C\x07f\x02\x02\x1C\x04\x03\x02\x02\x02\x1D\x1E\x07q\x02\x02\x1E" +
		"\x1F\x07t\x02\x02\x1F\x06\x03\x02\x02\x02 !\x07*\x02\x02!\b\x03\x02\x02" +
		"\x02\"#\x07+\x02\x02#\n\x03\x02\x02\x02$%\t\x02\x02\x02%\f\x03\x02\x02" +
		"\x02&\'\x07W\x02\x02\'(\x07p\x02\x02()\x07f\x02\x02)*\x07g\x02\x02*+\x07" +
		"t\x02\x02+,\x07i\x02\x02,-\x07t\x02\x02-.\x07c\x02\x02./\x07f\x02\x02" +
		"/0\x07w\x02\x0201\x07c\x02\x0212\x07v\x02\x0223\x07g\x02\x0234\x07\"\x02" +
		"\x0245\x07U\x02\x0256\x07g\x02\x0267\x07o\x02\x0278\x07g\x02\x0289\x07" +
		"u\x02\x029:\x07v\x02\x02:;\x07g\x02\x02;<\x07t\x02\x02<=\x07\"\x02\x02" +
		"=>\x07n\x02\x02>?\x07g\x02\x02?@\x07x\x02\x02@A\x07g\x02\x02AZ\x07n\x02" +
		"\x02BC\x07I\x02\x02CD\x07t\x02\x02DE\x07c\x02\x02EF\x07f\x02\x02FG\x07" +
		"w\x02\x02GH\x07c\x02\x02HI\x07v\x02\x02IJ\x07g\x02\x02JK\x07\"\x02\x02" +
		"KL\x07U\x02\x02LM\x07g\x02\x02MN\x07o\x02\x02NO\x07g\x02\x02OP\x07u\x02" +
		"\x02PQ\x07v\x02\x02QR\x07g\x02\x02RS\x07t\x02\x02ST\x07\"\x02\x02TU\x07" +
		"n\x02\x02UV\x07g\x02\x02VW\x07x\x02\x02WX\x07g\x02\x02XZ\x07n\x02\x02" +
		"Y&\x03\x02\x02\x02YB\x03\x02\x02\x02Z\x0E\x03\x02\x02\x02[\\\x07O\x02" +
		"\x02\\]\x07k\x02\x02]^\x07p\x02\x02^_\x07k\x02\x02_`\x07o\x02\x02`a\x07" +
		"w\x02\x02ab\x07o\x02\x02bc\x07\"\x02\x02cd\x07I\x02\x02de\x07t\x02\x02" +
		"ef\x07c\x02\x02fg\x07f\x02\x02gh\x07g\x02\x02hi\x07\"\x02\x02ij\x07q\x02" +
		"\x02jk\x07h\x02\x02k\x10\x03\x02\x02\x02lm\x07U\x02\x02mn\x07C\x02\x02" +
		"no\x07V\x02\x02op\x07\"\x02\x02pq\x07O\x02\x02qr\x07c\x02\x02rs\x07v\x02" +
		"\x02st\x07j\x02\x02tu\x07g\x02\x02uv\x07o\x02\x02vw\x07c\x02\x02wx\x07" +
		"v\x02\x02xy\x07k\x02\x02yz\x07e\x02\x02z\xCA\x07u\x02\x02{|\x07O\x02\x02" +
		"|}\x07C\x02\x02}~\x07V\x02\x02~\x7F\x07J\x02\x02\x7F\x80\x07\"\x02\x02" +
		"\x80\x81\x07U\x02\x02\x81\x82\x07G\x02\x02\x82\x83\x07E\x02\x02\x83\x84" +
		"\x07V\x02\x02\x84\x85\x07K\x02\x02\x85\x86\x07Q\x02\x02\x86\x87\x07P\x02" +
		"\x02\x87\x88\x07\"\x02\x02\x88\x89\x07U\x02\x02\x89\x8A\x07E\x02\x02\x8A" +
		"\x8B\x07Q\x02\x02\x8B\x8C\x07T\x02\x02\x8C\xCA\x07G\x02\x02\x8D\x8E\x07" +
		"C\x02\x02\x8E\x8F\x07E\x02\x02\x8F\x90\x07V\x02\x02\x90\x91\x07\"\x02" +
		"\x02\x91\x92\x07O\x02\x02\x92\x93\x07c\x02\x02\x93\x94\x07v\x02\x02\x94" +
		"\xCA\x07j\x02\x02\x95\x96\x07E\x02\x02\x96\x97\x07q\x02\x02\x97\x98\x07" +
		"p\x02\x02\x98\x99\x07x\x02\x02\x99\x9A\x07g\x02\x02\x9A\x9B\x07t\x02\x02" +
		"\x9B\x9C\x07v\x02\x02\x9C\x9D\x07g\x02\x02\x9D\x9E\x07f\x02\x02\x9E\x9F" +
		"\x07\"\x02\x02\x9F\xA0\x07C\x02\x02\xA0\xA1\x07E\x02\x02\xA1\xA2\x07V" +
		"\x02\x02\xA2\xA3\x07\"\x02\x02\xA3\xA4\x07O\x02\x02\xA4\xA5\x07c\x02\x02" +
		"\xA5\xA6\x07v\x02\x02\xA6\xCA\x07j\x02\x02\xA7\xA8\x07O\x02\x02\xA8\xA9" +
		"\x07c\x02\x02\xA9\xAA\x07v\x02\x02\xAA\xAB\x07j\x02\x02\xAB\xAC\x07<\x02" +
		"\x02\xAC\xAD\x07\"\x02\x02\xAD\xAE\x07E\x02\x02\xAE\xAF\x07c\x02\x02\xAF" +
		"\xB0\x07n\x02\x02\xB0\xB1\x07e\x02\x02\xB1\xB2\x07w\x02\x02\xB2\xB3\x07" +
		"n\x02\x02\xB3\xB4\x07w\x02\x02\xB4\xB5\x07u\x02\x02\xB5\xB6\x07\"\x02" +
		"\x02\xB6\xB7\x07C\x02\x02\xB7\xCA\x07D\x02\x02\xB8\xB9\x07O\x02\x02\xB9" +
		"\xBA\x07c\x02\x02\xBA\xBB\x07v\x02\x02\xBB\xBC\x07j\x02\x02\xBC\xBD\x07" +
		"<\x02\x02\xBD\xBE\x07\"\x02\x02\xBE\xBF\x07E\x02\x02\xBF\xC0\x07c\x02" +
		"\x02\xC0\xC1\x07n\x02\x02\xC1\xC2\x07e\x02\x02\xC2\xC3\x07w\x02\x02\xC3" +
		"\xC4\x07n\x02\x02\xC4\xC5\x07w\x02\x02\xC5\xC6\x07u\x02\x02\xC6\xC7\x07" +
		"\"\x02\x02\xC7\xC8\x07D\x02\x02\xC8\xCA\x07E\x02\x02\xC9l\x03\x02\x02" +
		"\x02\xC9{\x03\x02\x02\x02\xC9\x8D\x03\x02\x02\x02\xC9\x95\x03\x02\x02" +
		"\x02\xC9\xA7\x03\x02\x02\x02\xC9\xB8\x03\x02\x02\x02\xCA\x12\x03\x02\x02" +
		"\x02\xCB\xCD\t\x03\x02\x02\xCC\xCB\x03\x02\x02\x02\xCD\xCE\x03\x02\x02" +
		"\x02\xCE\xCC\x03\x02\x02\x02\xCE\xCF\x03\x02\x02\x02\xCF\xD3\x03\x02\x02" +
		"\x02\xD0\xD2\t\x04\x02\x02\xD1\xD0\x03\x02\x02\x02\xD2\xD5\x03\x02\x02" +
		"\x02\xD3\xD1\x03\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4\x14\x03\x02\x02" +
		"\x02\xD5\xD3\x03\x02\x02\x02\xD6\xD8\t\x04\x02\x02\xD7\xD6\x03\x02\x02" +
		"\x02\xD8\xD9\x03\x02\x02\x02\xD9\xD7\x03\x02\x02\x02\xD9\xDA\x03\x02\x02" +
		"\x02\xDA\x16\x03\x02\x02\x02\xDB\xDC\t\x05\x02\x02\xDC\xDD\x03\x02\x02" +
		"\x02\xDD\xDE\b\f\x02\x02\xDE\x18\x03\x02\x02\x02\b\x02Y\xC9\xCE\xD3\xD9" +
		"\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!PrerequisitesLexer.__ATN) {
			PrerequisitesLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(PrerequisitesLexer._serializedATN));
		}

		return PrerequisitesLexer.__ATN;
	}

}

