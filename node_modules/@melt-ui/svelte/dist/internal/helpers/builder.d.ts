import type { Action } from 'svelte/action';
import { type Readable, type Stores, type StoresValues } from 'svelte/store';
export declare function getElementByMeltId(id: string): HTMLElement | null;
export declare const hiddenAction: <T extends Record<string, unknown>>(obj: T) => T;
type BuilderCallback<S extends Stores | undefined> = S extends Stores ? (values: StoresValues<S>) => Record<string, any> | ((...args: any[]) => Record<string, any>) : () => Record<string, any> | ((...args: any[]) => Record<string, any>);
type BuilderArgs<S extends Stores | undefined, A extends Action<any, any>, R extends BuilderCallback<S>> = {
    stores?: S;
    action?: A;
    returned?: R;
};
type BuilderStore<S extends Stores | undefined, A extends Action<any, any>, R extends BuilderCallback<S>, Name extends string> = Readable<ReturnType<R> extends infer F extends (...args: any) => any ? ((...args: Parameters<F>) => ReturnType<F> & {
    [K in `data-melt-${Name}`]: '';
} & {
    action: A;
}) & {
    action: A;
} : ReturnType<R> & {
    [K in `data-melt-${Name}`]: '';
} & {
    action: A;
}>;
export declare function builder<S extends Stores | undefined, A extends Action<any, any>, R extends BuilderCallback<S>, Name extends string>(name: Name, args?: BuilderArgs<S, A, R>): ExplicitBuilderReturn<S, A, R, Name>;
export type ExplicitBuilderReturn<S extends Stores | undefined, A extends Action<any, any>, R extends BuilderCallback<S>, Name extends string> = BuilderStore<S, A, R, Name> & A;
export declare function createElHelpers<Part extends string = string>(prefix: string): {
    name: (part?: Part) => string;
    attribute: (part?: Part) => string;
    selector: (part?: Part) => string;
    getEl: (part?: Part) => Element | null;
};
export {};
