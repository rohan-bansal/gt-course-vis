/// <reference types="svelte" />
import type { MeltActionReturn } from '../../internal/types.js';
import type { CollapsibleEvents } from './events.js';
import type { CreateCollapsibleProps } from './types.js';
export declare function createCollapsible(props?: CreateCollapsibleProps): {
    elements: {
        root: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$open, $disabled]: [boolean, boolean]) => {
            'data-state': string;
            'data-disabled': boolean | undefined;
        }, string>;
        trigger: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>], (node: HTMLElement) => MeltActionReturn<CollapsibleEvents['trigger']>, ([$open, $disabled]: [boolean, boolean]) => {
            readonly 'data-state': "open" | "closed";
            readonly 'data-disabled': true | undefined;
            readonly disabled: true | undefined;
        }, string>;
        content: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$isVisible, $disabled]: [boolean, boolean]) => {
            'data-state': string;
            'data-disabled': boolean | undefined;
            hidden: boolean | undefined;
            style: string;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: import("../../internal/helpers/index.js").ToWritableStores<Omit<{
        disabled: boolean;
        forceVisible: boolean;
        defaultOpen: boolean;
        open?: import("svelte/store").Writable<boolean> | undefined;
        onOpenChange?: import("../../internal/helpers/index.js").ChangeFn<boolean> | undefined;
    }, "open" | "defaultOpen" | "onOpenChange">>;
};
