import { PreprocessorGroup as PreprocessorGroup$1 } from 'svelte/compiler';
import { PreprocessorGroup } from 'svelte/types/compiler/preprocess';

/**
 * A Svelte preprocessor that wraps other preprocessors and forces them to run sequentially.
 *
 * @example
 * ```js
 * // svelte.config.js
 * import { preprocessMeltUI, sequence } from '@melt-ui/pp';
 *
 * const config = {
 * 	// ... other svelte config options
 * 	preprocess: sequence([
 * 		// ... other preprocessors (e.g. `vitePreprocess()`)
 * 		preprocessMeltUI()
 * 	])
 * 	// ...
 * };
 * ```
 */
declare function sequence(preprocessors: PreprocessorGroup[]): PreprocessorGroup;

type PreprocessOptions = {
    /**
     * For aliasing the name of the `melt` action.
     *
     * When configured, the PP will __only__ process action names
     * that are passed to this field.
     *
     * @example
     * ```ts
     * // ONLY process actions named `_melt`
     * preprocessMeltUI({ alias: ["_melt"] })
     *
     * // process actions named `_melt` or `melt`
     * preprocessMeltUI({ alias: ["melt", "_melt"] })
     *
     * ```
     *
     * @default "melt"
     */
    alias?: string | string[];
};
/**
 * A preprocessor for Melt UI.
 *
 * Intelligently replaces all instances of `use:melt={$builder}` with the correct spread syntax,
 * providing a sleeker developer experience.
 *
 * Simply add it to the end of your array of preprocessors.
 * @example
 * ```js
 * // svelte.config.js
 * import { preprocessMeltUI } from '@melt-ui/pp';
 *
 * const config = {
 * 	// ... other svelte config options
 * 	preprocess: [
 * 		// ... other preprocessors
 * 		preprocessMeltUI() // add to the end!
 * 	]
 * 	// ...
 * };
 * ```
 */
declare function preprocessMeltUI(options?: PreprocessOptions): PreprocessorGroup$1;

export { PreprocessOptions, preprocessMeltUI, sequence };
